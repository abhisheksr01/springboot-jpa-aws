plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.15.0'
    id "org.owasp.dependencycheck" version "12.1.0"
}

String buildId = project.hasProperty('buildId') ? project['buildId'] : 'DEV'
group = 'com.sampleapp'
version = "${semanticVersion}.${buildId}"
sourceCompatibility = '21'

/** Disables generating plain jar introduced in spring boot 2.5.0
 **  https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#packaging-executable.and-plain-archives
 **/
jar {
    enabled = false
}

repositories {
    mavenCentral()
}

ext {
    mapstructVersion = "1.6.3"
    lombokVersion = "1.18.36"
    wireMockVersion = "3.10.0"
    ioCucumberVersion = "7.21.1"
    springDocVersion = "2.7.0"
    jacocoVersion = "0.8.9"
    junitVintage = "5.12.0"
    jakartaValidation = "3.1.1"
    flyway = "11.3.4"
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation "jakarta.validation:jakarta.validation-api:${jakartaValidation}"

    // Cucumber Dependencies for BDD
    testImplementation "io.cucumber:cucumber-java:${ioCucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit:${ioCucumberVersion}"
    testImplementation "io.cucumber:cucumber-spring:${ioCucumberVersion}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${junitVintage}"
    testImplementation 'org.testcontainers:postgresql:1.20.5'
    testImplementation "org.testcontainers:junit-jupiter:1.20.5"

    implementation 'org.postgresql:postgresql:42.7.5'
    implementation "org.flywaydb:flyway-core:${flyway}"
    runtimeOnly "org.flywaydb:flyway-database-postgresql:${flyway}"
    //Lombok Dependencies
    implementation "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    //MapStruct Dependencies
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    /*
     *https://docs.gradle.org/current/userguide/dependency_management.html#sec:module_substitution
     * Example 109. Example: Blacklisting a version with a replacement
    */
    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.apache.commons' && details.requested.name == 'commons-compress' && details.requested.version == '1.24.0') {
                details.useVersion '1.26.0'
                details.because 'Fixes vulnerability in prior commons-compress versions'
            }
        }
    }
}

// Property can be passed along with test task to avoid execution of e2e
test {
    if (project.hasProperty('excludee2e')) {
        println '********************************************************'
        println '                   Excluding E2E tests'
        println '********************************************************'
        exclude '**/*e2e*'
    }
    if (project.hasProperty('e2e')) {
        println '********************************************************'
        println '                   Executing E2E tests'
        println '********************************************************'
        //include all tests from package
        filter {
            includeTestsMatching "com.sampleapp.helloworld.e2e.*"
        }
    }
    useJUnitPlatform()
}

// Jacoco for Code Coverage
jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory = file("$buildDir/customJacocoReportDir")
}

// Runs Jacoco tasks when build task is executed
build {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}
// Setting custom parameters when executing jacocoTestReport task
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("${buildDir}/reports/jacocoHtml")
    }
}

// Setting custom parameters when executing jacocoTestCoverageVerification task for setting rules
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 1.0
            }
        }
    }
}
pitest {
    junit5PluginVersion = '1.2.1'
    testPlugin = "junit5"
    targetClasses = ['com.sampleapp.helloworld.*']  // by default "${project.group}.*"
    targetTests = ['com.sampleapp.helloworld.*']  // by default "${project.group}.*"
    // TODO: Mutation tests failing due to port already in use exception, fix them and then we can remove below
    excludedTestClasses = ['com.sampleapp.helloworld.e2e.*', 'com.sampleapp.helloworld.HelloWorldApplicationTest*']
}
// owasp dependency vulnerability check
// Reference doc : https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    if (project.hasProperty('UseNVDKey')) {
        println 'Executing DependencyCheckAnalyse with the NVD_API_KEY environment variable'
        nvd {
            apiKey = System.getenv('NVD_API_KEY')
            delay = 3500
        }
    } else {
        println 'Executing DependencyCheckAnalyse without NVD API Key'
    }

    analyzedTypes = ['jar']
    // CI-tools usually needs XML-reports, but humans needs HTML.
    formats = ['HTML', 'JUNIT']
    // Specifies if the build should be failed if a CVSS score equal to or above a specified level is identified.
    failBuildOnCVSS = 8
    // Output directory where the report should be generated
    outputDirectory = "build/reports/dependency-vulnerabilities"
    // specify a list of known issues which contain false-positives to be suppressed
    suppressionFiles = ["$projectDir/config/dependencycheck/dependency-check-suppression.xml"]
}
